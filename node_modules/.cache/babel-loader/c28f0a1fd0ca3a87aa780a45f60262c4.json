{"ast":null,"code":"var _jsxFileName = \"/home/kieran/Documents/Online Learning/Udemy/Modern_React_Redux/season_geotracking/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay'; // This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n\n/* *** Component LifeCycle: Creation to Removal\n\t1. constructor\n\n\t2. render\n\t \t* content visible on screen; HAVE TO DEFINE\n\n\t3. componentDidMount\n\t\t* automatically called when component first shows up in app;\n\n\t\tSit and wait for updates to data on page;\n\n\t4. componentDidUpdate\n\t\t* called automatically when component changes;\n\n\t\tsit and wait until component is no longer shown\n\n\t5. componentWillUnmount\n*/\n\n/* *** Component LifeCycle Methods\n\tExamples of when to use Lifecycle Methods:\n\n\t\tconstructor(props) : good place for one-time setup, state initialization; avoid data loading, used `componentDidMount` instead;\n\n\t\trender() : avoid doing anything BESIDES returning JSX;\n\n\t\tcomponentDidMount() : initial data loading for components, outside processes (ex: current position, API requests, etc); only loads once, upon mount;\n\n\t\tcomponentDidUpdate: called EVERY TIME a component updates; data-loading when state/props change (network request, input changes, etc.);\n\n\t\tcomponentWillUnmount() : clean-up data;\n\n\n\t\t***Other LifeCycle Methods (not often used):\n\t\tshouldComponentUpdate()\n\t\tgetDerivedStateFromProps()\n\t\tgetSnapshotBeforeUpdate()\n*/\n\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n// `App` written as `class`- based component:\n\nclass App extends React.Component {\n  // `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n  // `constructor` is not required unless building additional setup for app.\n  constructor(props) {\n    super(props); // `super` used to set initial `state` in React\n    // `state` is created inside a JS object (`{...}`)\n    // create `this.state` to track `state` across the app.\n    // direct assignment to `state` in ONLY done when INITIALIZING `state`;\n\n    this.state = {\n      lat: null,\n      long: null,\n      errorMessage: null\n      /* Can also set initial state in a single line, w/o having to use constructor method:\n      \tstate = { lat: null, long: null, errorMessage: null };\n      */\n\n    };\n  }\n\n  componentDidMount() {\n    console.log('Component Did Mount'); // use built-in browser function to get `geolocation` for user\n    // this was initially built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data (in this case from the browser), but was moved into `componentDidMount()`, as it is a better lifeCycle method to use for initial data loading.\n\n    window.navigator.geolocation.getCurrentPosition(position => {\n      // called `setState` to update `lat` and `long`\n      this.setState({\n        lat: position.coords.latitude\n      });\n      this.setState({\n        long: position.coords.longitude\n      });\n    }, // make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n    error => this.setState({\n      errorMessage: error.message\n    }));\n  }\n\n  componentDidUpdate() {\n    console.log('Component Updated');\n  }\n\n  componentWillUnmount() {\n    console.log('Component Unmounted');\n  }\n\n  render() {\n    // `if` statements are helpful for Conditional Rendering...\n    if (this.state.errorMessage && !this.state.lat) {\n      return React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"Error: \", this.state.errorMessage);\n    } else if (!this.state.errorMessage && this.state.lat) {\n      return (// `state` can be passed down to children components as `props`\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(SeasonDisplay, {\n          lat: this.state.lat,\n          long: this.state.long,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        })))\n      );\n    }\n\n    return React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n}\n\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 149\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/home/kieran/Documents/Online Learning/Udemy/Modern_React_Redux/season_geotracking/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","App","Component","constructor","props","state","lat","long","errorMessage","componentDidMount","console","log","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","message","componentDidUpdate","componentWillUnmount","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAEA;;AAEA;;;;;;;;;;AAWA;;AAEA;;;;;;AAMA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;AASA;;AACA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAEjC;AACA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN,EADkB,CACJ;AACd;AAEA;AACA;;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,GAAG,EAAE,IADO;AAEZC,MAAAA,IAAI,EAAE,IAFM;AAGZC,MAAAA,YAAY,EAAE;AAGf;;;;AANa,KAAb;AAWA;;AAIDC,EAAAA,iBAAiB,GAAG;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EADmB,CAGnB;AACA;;AACAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACEC,QAAD,IAAc;AACb;AACA,WAAKC,QAAL,CAAc;AAAEX,QAAAA,GAAG,EAAEU,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAd;AACA,WAAKF,QAAL,CAAc;AAAEV,QAAAA,IAAI,EAAES,QAAQ,CAACE,MAAT,CAAgBE;AAAxB,OAAd;AACA,KALF,EAMC;AACCC,IAAAA,KAAD,IAAW,KAAKJ,QAAL,CAAc;AAAET,MAAAA,YAAY,EAAEa,KAAK,CAACC;AAAtB,KAAd,CAPZ;AASA;;AAEDC,EAAAA,kBAAkB,GAAG;AACpBb,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;;AAEDa,EAAAA,oBAAoB,GAAG;AACtBd,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA;;AAEDc,EAAAA,MAAM,GAAG;AAGR;AACA,QAAG,KAAKpB,KAAL,CAAWG,YAAX,IAA2B,CAAC,KAAKH,KAAL,CAAWC,GAA1C,EAA+C;AAC9C,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAY,KAAKD,KAAL,CAAWG,YAAvB,CAAP;AACA,KAFD,MAEO,IAAI,CAAC,KAAKH,KAAL,CAAWG,YAAZ,IAA4B,KAAKH,KAAL,CAAWC,GAA3C,EAAgD;AACtD,aACC;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACC,oBAAC,aAAD;AACC,UAAA,GAAG,EAAE,KAAKD,KAAL,CAAWC,GADjB;AAEC,UAAA,IAAI,EAAE,KAAKD,KAAL,CAAWE,IAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADD,CADD;AAFD;AAWA;;AACD,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACA;;AArEgC;;AAwElCR,QAAQ,CAAC0B,MAAT,CACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAECC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\n\n// This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n\n/* *** Component LifeCycle: Creation to Removal\n\t1. constructor\n\n\t2. render\n\t \t* content visible on screen; HAVE TO DEFINE\n\n\t3. componentDidMount\n\t\t* automatically called when component first shows up in app;\n\n\t\tSit and wait for updates to data on page;\n\n\t4. componentDidUpdate\n\t\t* called automatically when component changes;\n\n\t\tsit and wait until component is no longer shown\n\n\t5. componentWillUnmount\n*/\n\n/* *** Component LifeCycle Methods\n\tExamples of when to use Lifecycle Methods:\n\n\t\tconstructor(props) : good place for one-time setup, state initialization; avoid data loading, used `componentDidMount` instead;\n\n\t\trender() : avoid doing anything BESIDES returning JSX;\n\n\t\tcomponentDidMount() : initial data loading for components, outside processes (ex: current position, API requests, etc); only loads once, upon mount;\n\n\t\tcomponentDidUpdate: called EVERY TIME a component updates; data-loading when state/props change (network request, input changes, etc.);\n\n\t\tcomponentWillUnmount() : clean-up data;\n\n\n\t\t***Other LifeCycle Methods (not often used):\n\t\tshouldComponentUpdate()\n\t\tgetDerivedStateFromProps()\n\t\tgetSnapshotBeforeUpdate()\n*/\n\n\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n\n// `App` written as `class`- based component:\nclass App extends React.Component {\n\n\t// `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n\t// `constructor` is not required unless building additional setup for app.\n\tconstructor(props) {\n\t\tsuper(props); // `super` used to set initial `state` in React\n\t\t// `state` is created inside a JS object (`{...}`)\n\n\t\t// create `this.state` to track `state` across the app.\n\t\t// direct assignment to `state` in ONLY done when INITIALIZING `state`;\n\t\tthis.state = {\n\t\t\tlat: null,\n\t\t\tlong: null,\n\t\t\terrorMessage: null\n\t\t}\n\n\t\t/* Can also set initial state in a single line, w/o having to use constructor method:\n\n\t\tstate = { lat: null, long: null, errorMessage: null };\n\t\t*/\n\n\t}\n\n\n\n\tcomponentDidMount() {\n\t\tconsole.log('Component Did Mount');\n\n\t\t// use built-in browser function to get `geolocation` for user\n\t\t// this was initially built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data (in this case from the browser), but was moved into `componentDidMount()`, as it is a better lifeCycle method to use for initial data loading.\n\t\twindow.navigator.geolocation.getCurrentPosition(\n\t\t\t(position) => {\n\t\t\t\t// called `setState` to update `lat` and `long`\n\t\t\t\tthis.setState({ lat: position.coords.latitude });\n\t\t\t\tthis.setState({ long: position.coords.longitude });\n\t\t\t},\n\t\t\t// make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n\t\t\t(error) => this.setState({ errorMessage: error.message })\n\t\t);\n\t}\n\n\tcomponentDidUpdate() {\n\t\tconsole.log('Component Updated')\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconsole.log('Component Unmounted')\n\t}\n\n\trender() {\n\n\n\t\t// `if` statements are helpful for Conditional Rendering...\n\t\tif(this.state.errorMessage && !this.state.lat) {\n\t\t\treturn <h2>Error: {this.state.errorMessage}</h2>;\n\t\t} else if (!this.state.errorMessage && this.state.lat) {\n\t\t\treturn (\n\t\t\t\t// `state` can be passed down to children components as `props`\n\t\t\t\t<div>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<SeasonDisplay\n\t\t\t\t\t\t\tlat={this.state.lat}\n\t\t\t\t\t\t\tlong={this.state.long}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn <h2>Loading...</h2>;\n\t}\n}\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);\n"]},"metadata":{},"sourceType":"module"}