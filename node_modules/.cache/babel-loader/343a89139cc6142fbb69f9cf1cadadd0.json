{"ast":null,"code":"var _jsxFileName = \"/home/terminal/Documents/WebDev/Projects/season_geotracking/src/Components/WeatherCard.js\";\nimport React, { Component } from \"react\";\nimport \"./WeatherCard.css\";\n\nclass WeatherCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherForecast: []\n    };\n  }\n\n  async componentDidMount() {\n    // API retrieved via `fetch`\n    const response = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=48f162a78e4f4a62865190945190412&q=${this.props.lat},${this.props.lon}&days=5`); // convert results to JSON\n\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      weatherForecast: data.forecast.forecastday\n    });\n\n    const location = () => {\n      console.log(\"lat: \" + props.lat);\n      console.log(\"lon: \" + props.lon);\n    };\n\n    const dailyCard = weatherForecast.map(index => {\n      location();\n      return React.createElement(\"div\", {\n        className: \"ui card\",\n        id: \"card\",\n        key: index.date_epoch,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, index.date, React.createElement(\"div\", {\n        className: \"image\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: index.day.condition.icon,\n        alt: \"Weather Icon\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      })), \"Conditions: \", index.day.condition.text, React.createElement(\"div\", {\n        className: \"meta\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"header\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, \"High/Low: \", index.day.maxtemp_f, \"f/\", index.day.mintemp_f, \"f\"))), React.createElement(\"div\", {\n        className: \"description\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      })));\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, dailyCard);\n  }\n\n}\n\nexport default WeatherCard;","map":{"version":3,"sources":["/home/terminal/Documents/WebDev/Projects/season_geotracking/src/Components/WeatherCard.js"],"names":["React","Component","WeatherCard","constructor","props","state","weatherForecast","componentDidMount","response","fetch","lat","lon","data","json","console","log","setState","forecast","forecastday","location","dailyCard","map","index","date_epoch","date","day","condition","icon","text","maxtemp_f","mintemp_f","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;;AAEA,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAClCE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,eAAe,EAAE;AADN,KAAb;AAGD;;AAED,QAAMC,iBAAN,GAA0B;AACxB;AACA,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oFAAmF,KAAKL,KAAL,CAAWM,GAAI,IAAG,KAAKN,KAAL,CAAWO,GAAI,SAAtH,CAA5B,CAFwB,CAG1B;;AACA,UAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAKI,QAAL,CAAc;AAAEV,MAAAA,eAAe,EAAEM,IAAI,CAACK,QAAL,CAAcC;AAAjC,KAAd;;AAEA,UAAMC,QAAQ,GAAG,MAAM;AACrBL,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUX,KAAK,CAACM,GAA5B;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAUX,KAAK,CAACO,GAA5B;AACD,KAHD;;AAKA,UAAMS,SAAS,GAAGd,eAAe,CAACe,GAAhB,CAAqBC,KAAD,IAAW;AAC/CH,MAAAA,QAAQ;AACR,aACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAyB,QAAA,EAAE,EAAC,MAA5B;AAAmC,QAAA,GAAG,EAAEG,KAAK,CAACC,UAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGD,KAAK,CAACE,IADT,EAEE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,GAAG,EAAEF,KAAK,CAACG,GAAN,CAAUC,SAAV,CAAoBC,IAA9B;AAAoC,QAAA,GAAG,EAAC,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CAFF,kBAKeL,KAAK,CAACG,GAAN,CAAUC,SAAV,CAAoBE,IALnC,EAME;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiBN,KAAK,CAACG,GAAN,CAAUI,SAA3B,QAAwCP,KAAK,CAACG,GAAN,CAAUK,SAAlD,MADF,CADF,CANF,EAYE;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZF,CADF,CADF;AAmBD,KArBiB,CAAlB;AAsBD;;AACCC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,SADH,CADF;AAKD;;AAlDiC;;AAqDpC,eAAelB,WAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./WeatherCard.css\";\n\nclass WeatherCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      weatherForecast: []\n    }\n  }\n\n  async componentDidMount() {\n    // API retrieved via `fetch`\n    const response = await fetch(`http://api.weatherapi.com/v1/forecast.json?key=48f162a78e4f4a62865190945190412&q=${this.props.lat},${this.props.lon}&days=5`)\n\t\t// convert results to JSON\n\t\tconst data = await response.json();\n\t\tconsole.log(data);\n\t\tthis.setState({ weatherForecast: data.forecast.forecastday });\n\n  const location = () => {\n    console.log(\"lat: \" + props.lat);\n    console.log(\"lon: \" + props.lon);\n  }\n\n  const dailyCard = weatherForecast.map((index) => {\n    location();\n    return (\n      <div className=\"ui card\" id=\"card\" key={index.date_epoch}>\n        <div className=\"content\">\n          {index.date}\n          <div className=\"image\">\n            <img src={index.day.condition.icon} alt=\"Weather Icon\" />\n          </div>\n          Conditions: {index.day.condition.text}\n          <div className=\"meta\">\n            <p className=\"header\">\n              <span>High/Low: {index.day.maxtemp_f}f/{index.day.mintemp_f}f\n              </span>\n            </p>\n          </div>\n          <div className=\"description\">\n          </div>\n        </div>\n      </div>\n    )\n  })\n}\n  render() {\n    return(\n      <div>\n        {dailyCard}\n      </div>\n    )\n  }\n}\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}