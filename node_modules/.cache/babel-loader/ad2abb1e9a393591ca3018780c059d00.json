{"ast":null,"code":"var _jsxFileName = \"/home/hayabusa/Documents/WebDevelopment/Modern_React_Redux/season_geotracking/src/SeasonDisplay.js\";\nimport React from 'react';\nimport './SeasonDisplay.css';\nimport MapWrapper from \"./mapsAPI\"; // created configuration object (`seasonTheme`) to make objects with `text` and `iconName` options to plug directly into the `return` statement based on what renders from the results of the `season` variable.\n\nconst seasonTheme = {\n  spring: {\n    text: \"Mother Earth has Awoken\",\n    iconName: 'umbrella'\n  },\n  summer: {\n    text: \"Surf's Up, Son!!!\",\n    iconName: 'sun'\n  },\n  fall: {\n    text: \"It's Fall, Bitches!!!\",\n    iconName: 'leaf'\n  },\n  winter: {\n    text: \"Cuz I'm... Cold-Blooooded!!!\",\n    iconName: 'snowflake'\n  },\n  error: {\n    text: \"Wait...What Happened???\",\n    icon: 'question circle'\n  }\n}; // more `if` statements for conditional rendering\n\nconst getSeason = (lat, month) => {\n  if (lat > 0) {\n    if (month > 1 && month < 5) {\n      return \"spring\";\n    } else if (month > 4 && month < 8) {\n      return \"summer\";\n    } else if (month > 7 && month < 10) {\n      return \"fall\";\n    } else if (month > 2 || month < 9) {\n      return \"winter\";\n    } else {\n      return \"error\";\n    }\n  } else if (lat < 0) {\n    if (month > 1 && month < 5) {\n      return \"fall\";\n    } else if (month > 4 && month < 8) {\n      return \"winter\";\n    } else if (month > 7 && month < 10) {\n      return \"spring\";\n    } else if (month > 2 || month < 9) {\n      return \"summer\";\n    } else {\n      return \"error\";\n    }\n  }\n};\n\nconst SeasonDisplay = props => {\n  // select and save results of `getSeason` statement\n  const season = getSeason(props.lat, new Date().getMonth()); // `text` and `iconName` destructrued from `seasonConfig`, then placed directly into the `return` statement based on `season` variable\n\n  const _seasonTheme$season = seasonTheme[season],\n        text = _seasonTheme$season.text,\n        iconName = _seasonTheme$season.iconName;\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"locationDisplay\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"Latitude: \", props.lat), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, \"Longitude: \", props.long), React.createElement(MapWrapper, {\n    lat: props.lat,\n    long: props.long,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"season-display \".concat(season),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"icon-left huge \".concat(iconName, \" icon\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"seasonText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, season), React.createElement(\"h2\", {\n    className: \"seasonText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, text), React.createElement(\"i\", {\n    className: \"icon-right huge \".concat(iconName, \" icon\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n};\n\nexport default SeasonDisplay;","map":{"version":3,"sources":["/home/hayabusa/Documents/WebDevelopment/Modern_React_Redux/season_geotracking/src/SeasonDisplay.js"],"names":["React","MapWrapper","seasonTheme","spring","text","iconName","summer","fall","winter","error","icon","getSeason","lat","month","SeasonDisplay","props","season","Date","getMonth","long"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\nimport MapWrapper from \"./mapsAPI\";\n\n// created configuration object (`seasonTheme`) to make objects with `text` and `iconName` options to plug directly into the `return` statement based on what renders from the results of the `season` variable.\nconst seasonTheme = {\n\tspring: {\n\t\ttext: \"Mother Earth has Awoken\",\n\t\ticonName: 'umbrella'\n\t},\n\tsummer: {\n\t\ttext: \"Surf's Up, Son!!!\",\n\t\ticonName: 'sun'\n\t},\n\tfall: {\n\t\ttext: \"It's Fall, Bitches!!!\",\n\t\ticonName: 'leaf'\n\t},\n\twinter: {\n\t\ttext: \"Cuz I'm... Cold-Blooooded!!!\",\n\t\ticonName: 'snowflake'\n\t},\n\terror: {\n\t\ttext: \"Wait...What Happened???\",\n\t\ticon: 'question circle'\n\t}\n};\n\n// more `if` statements for conditional rendering\nconst getSeason = (lat, month) => {\n\tif (lat > 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"spring\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"summer\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"fall\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"winter\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t} else if (lat < 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"fall\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"winter\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"spring\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"summer\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t}\n}\n\nconst SeasonDisplay = props => {\n\t// select and save results of `getSeason` statement\n\tconst season = getSeason(props.lat, new Date().getMonth());\n\t// `text` and `iconName` destructrued from `seasonConfig`, then placed directly into the `return` statement based on `season` variable\n\tconst { text, iconName } = seasonTheme[season];\n\n\treturn (\n\t\t<div className='container'>\n\t\t\t<div className='locationDisplay'>\n\t\t\t\t<h3>Latitude: {props.lat}</h3>\n\t\t\t\t<h3>Longitude: {props.long}</h3>\n\t\t\t\t<MapWrapper\n\t\t\t\t\tlat = {props.lat}\n\t\t\t\t\tlong= {props.long}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className={`season-display ${season}`}>\n\t\t\t\t<i className={`icon-left huge ${iconName} icon`} />\n\t\t\t\t<h1 className='seasonText'>{season}</h1>\n\t\t\t\t<h2 className='seasonText'>{text}</h2>\n\t\t\t\t<i className={`icon-right huge ${iconName} icon`} />\n\t\t\t</div>\n\t\t</div>\n\n\n\t);\n};\n\nexport default SeasonDisplay;\n"]},"metadata":{},"sourceType":"module"}