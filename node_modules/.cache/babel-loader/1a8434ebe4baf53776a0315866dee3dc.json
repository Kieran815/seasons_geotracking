{"ast":null,"code":"var _jsxFileName = \"/home/kieran/Documents/Online Learning/Udemy/Modern_React_Redux/season_geotracking/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay'; // This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n// `App` written as `class`- based component:\n\nclass App extends React.Component {\n  // `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n  // `constructor` is not required unless building additional setup for app.\n  constructor(props) {\n    super(props); // `super` used to set initial `state` in React\n    // `state` is created inside a JS object (`{...}`)\n    // create `this.state` to track `state` across the app.\n    // direct assignment to `state` in ONLY done when INITIALIZING `state`;\n\n    this.state = {\n      lat: 'Enable GeoLocation',\n      long: 'Enable GeoLocation',\n      errorMessage: null // use built-in browser function to get `geolocation` for user\n      // this is built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data, in this case from the browser.\n\n    };\n    window.navigator.geolocation.getCurrentPosition(position => {\n      // called `setState` to update `lat` and `long`\n      this.setState({\n        lat: position.coords.latitude\n      });\n      this.setState({\n        long: position.coords.longitude\n      });\n    }, // make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n    error => {\n      console.log(error);\n      this.setState({\n        errorMessage: error.message\n      });\n    });\n  }\n\n  render() {\n    {\n      /* `if` statements are helpful for Conditional Rendering... */\n    }\n\n    if (this.state.errorMessage && !this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, this.state.errorMessage), React.createElement(SeasonDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Latitude: \", this.state.lat), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, \"Longitude: \", this.state.long), React.createElement(SeasonDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }));\n    }\n\n    {\n      /* return <div>Loading...<SeasonDisplay /></div> */\n    }\n    ;\n  }\n\n}\n\n;\nReactDOM.render(React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 94\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/home/kieran/Documents/Online Learning/Udemy/Modern_React_Redux/season_geotracking/src/index.js"],"names":["React","ReactDOM","SeasonDisplay","App","Component","constructor","props","state","lat","long","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","longitude","error","console","log","message","render","document","querySelector"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B,C,CAEA;;AAEA;;;;;;;;;;AAYA;;AAEA;;;;;;AAMA;;;;;;;;AASA;;AACA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAEjC;AACA;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN,EADkB,CACJ;AACd;AAEA;AACA;;AACA,SAAKC,KAAL,GAAa;AACZC,MAAAA,GAAG,EAAE,oBADO;AAEZC,MAAAA,IAAI,EAAE,oBAFM;AAGZC,MAAAA,YAAY,EAAE,IAHF,CAMb;AACA;;AAPa,KAAb;AAQAC,IAAAA,MAAM,CAACC,SAAP,CAAiBC,WAAjB,CAA6BC,kBAA7B,CACEC,QAAD,IAAc;AACb;AACA,WAAKC,QAAL,CAAc;AAAER,QAAAA,GAAG,EAAEO,QAAQ,CAACE,MAAT,CAAgBC;AAAvB,OAAd;AACA,WAAKF,QAAL,CAAc;AAAEP,QAAAA,IAAI,EAAEM,QAAQ,CAACE,MAAT,CAAgBE;AAAxB,OAAd;AACA,KALF,EAMC;AACCC,IAAAA,KAAD,IAAW;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAKJ,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAEU,KAAK,CAACG;AAAtB,OAAd;AACA,KAVF;AAYA;;AAEDC,EAAAA,MAAM,GAAG;AACR;AAAC;AAA+D;;AAChE,QAAG,KAAKjB,KAAL,CAAWG,YAAX,IAA2B,CAAC,KAAKH,KAAL,CAAWC,GAA1C,EAA+C;AAC9C,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKD,KAAL,CAAWG,YAAhB,CADD,EAEC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD,CADD;AAMA;;AACD,QAAG,CAAC,KAAKH,KAAL,CAAWG,YAAZ,IAA4B,KAAKH,KAAL,CAAWC,GAA1C,EAA+C;AAC9C,aACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe,KAAKD,KAAL,CAAWC,GAA1B,CAFD,EAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAgB,KAAKD,KAAL,CAAWE,IAA3B,CAHD,EAIC,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJD,CADD;AAQA;;AACD;AAAC;AAAoD;AAAA;AACrD;;AArDgC;;AAsDjC;AAEDR,QAAQ,CAACuB,MAAT,CACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,EAECC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAFD","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\n\n// This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n\n\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n\n// `App` written as `class`- based component:\nclass App extends React.Component {\n\n\t// `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n\t// `constructor` is not required unless building additional setup for app.\n\tconstructor(props) {\n\t\tsuper(props); // `super` used to set initial `state` in React\n\t\t// `state` is created inside a JS object (`{...}`)\n\n\t\t// create `this.state` to track `state` across the app.\n\t\t// direct assignment to `state` in ONLY done when INITIALIZING `state`;\n\t\tthis.state = {\n\t\t\tlat: 'Enable GeoLocation',\n\t\t\tlong: 'Enable GeoLocation',\n\t\t\terrorMessage: null\n\t\t}\n\n\t\t// use built-in browser function to get `geolocation` for user\n\t\t// this is built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data, in this case from the browser.\n\t\twindow.navigator.geolocation.getCurrentPosition(\n\t\t\t(position) => {\n\t\t\t\t// called `setState` to update `lat` and `long`\n\t\t\t\tthis.setState({ lat: position.coords.latitude });\n\t\t\t\tthis.setState({ long: position.coords.longitude })\n\t\t\t},\n\t\t\t// make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n\t\t\t(error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t\tthis.setState({ errorMessage: error.message });\n\t\t\t}\n\t\t);\n\t}\n\n\trender() {\n\t\t{/* `if` statements are helpful for Conditional Rendering... */}\n\t\tif(this.state.errorMessage && !this.state.lat) {\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t<h2>{this.state.errorMessage}</h2>\n\t\t\t\t\t<SeasonDisplay />\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\tif(!this.state.errorMessage && this.state.lat) {\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t{/* once state is set, you can call an object's current state to render different data. */}\n\t\t\t\t\t<h2>Latitude: {this.state.lat}</h2>\n\t\t\t\t\t<h2>Longitude: {this.state.long}</h2>\n\t\t\t\t\t<SeasonDisplay />\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\t{/* return <div>Loading...<SeasonDisplay /></div> */};\n\t};\n};\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);\n"]},"metadata":{},"sourceType":"module"}