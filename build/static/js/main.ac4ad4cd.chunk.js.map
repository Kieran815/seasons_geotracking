{"version":3,"sources":["Components/SeasonDisplay.js","Components/loader.js","APIs/mapsAPI.js","Components/WeatherCard.js","Components/LocationData.js","Components/App.js","index.js"],"names":["seasonTheme","Spring","text","iconName","Summer","Fall","Winter","error","icon","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","require","config","MapContainer","google","this","style","display","justifyContent","width","maxWidth","height","minHeight","maxHeight","initialCenter","lng","lon","zoom","React","Component","GoogleApiWrapper","apiKey","process","FIREBASE_API_KEY","WeatherCard","dailyCard","weatherForecast","map","index","id","key","date_epoch","date","src","day","condition","alt","maxtemp_f","mintemp_f","LocationData","App","state","mapData","errorMessage","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","a","fetch","response","json","data","forecast","forecastday","renderContent","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.ac4ad4cd.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\n// created configuration object (`seasonTheme`) to make objects with `text` and `iconName` options to plug directly into the `return` statement based on what renders from the results of the `season` variable.\nconst seasonTheme = {\n\tSpring: {\n\t\ttext: \"Mother Earth has Awoken\",\n\t\ticonName: 'umbrella'\n\t},\n\tSummer: {\n\t\ttext: \"Surf's Up, Son!!!\",\n\t\ticonName: 'sun'\n\t},\n\tFall: {\n\t\ttext: \"It's Fall, Bitches!!!\",\n\t\ticonName: 'leaf'\n\t},\n\tWinter: {\n\t\ttext: \"Cuz I'm... Cold-Blooooded!!!\",\n\t\ticonName: 'snowflake'\n\t},\n\terror: {\n\t\ttext: \"Wait...What Happened???\",\n\t\ticon: 'question circle'\n\t}\n};\n\n// more `if` statements for conditional rendering\nconst getSeason = (lat, month) => {\n\tif (lat > 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"Spring\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"Summer\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"Fall\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"Winter\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t} else if (lat < 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"fall\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"winter\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"spring\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"summer\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t}\n}\n\nconst SeasonDisplay = props => {\n\t// select and save results of `getSeason` statement\n\tconst season = getSeason(props.lat, new Date().getMonth());\n\t// `text` and `iconName` destructrued from `seasonConfig`, then placed directly into the `return` statement based on `season` variable\n\tconst { text, iconName } = seasonTheme[season];\n\n\treturn (\n\t\t<div className='season-display container'>\n\t\t\t<div className={`season-display ${season}`}>\n\t\t\t\t<i className={`icon-left huge ${iconName} icon`} />\n\t\t\t\t<h1 className='seasonText'>{season}</h1>\n\t\t\t\t<h2 className='seasonText'>{text}</h2>\n\t\t\t\t<i className={`icon-right huge ${iconName} icon`} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Loader = (props) => {\n\treturn (\n\t  <div className=\"ui active dimmer\">\n\t    <div className=\"ui text loader\">{props.message}</div>\n\t  </div>\n\t);\n};\n\nLoader.defaultProps = {\n\tmessage: 'Loading...'\n};\n\nexport default Loader;\n","import React from \"react\";\nimport { Map, GoogleApiWrapper } from \"google-maps-react\";\nrequire(\"dotenv\").config();\n\nexport class MapContainer extends React.Component {\n  render() {\n    const style = {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      width: \"auto\",\n      maxWidth: \"21em\",\n      height: \"45vh\",\n      minHeight: \"40vh\",\n      maxHeight: \"50vh\"\n    };\n    return (\n      <Map\n        google={this.props.google}\n        style={style}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lon\n        }}\n        zoom={16}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.FIREBASE_API_KEY\n})(MapContainer);\n","import React from \"react\";\nimport \"./WeatherCard.css\";\n\nconst WeatherCard = props => {\n\n  const weatherForecast = props.weatherForecast;\n\n  const dailyCard = weatherForecast.map((index) => {\n    return (\n      <div className=\"ui card\" id=\"card\" key={index.date_epoch}>\n        <div className=\"content\">\n          <div className=\"header\">\n            {index.date}\n          </div>\n          <div className=\"image\">\n            <img src={index.day.condition.icon} alt=\"Weather Icon\" />\n          </div>\n          <div className=\"meta\">\n            <p>Conditions: {index.day.condition.text}</p>\n            <p className=\"header\">\n              <span>High/Low: {index.day.maxtemp_f}f/{index.day.mintemp_f}f\n              </span>\n            </p>\n          </div>\n          <div className=\"description\">\n          </div>\n        </div>\n      </div>\n    )\n  })\n\n  return(\n    <div className=\"dailyCardGroup\">\n      {dailyCard}\n    </div>\n  )\n}\n\nexport default WeatherCard;\n","import React from \"react\";\nimport GoogleApiWrapper from \"../APIs/mapsAPI\";\nimport WeatherCard from \"./WeatherCard\";\nimport \"./LocationData.css\";\n\nconst LocationData = props => {\n  return (\n    <div className=\"locationData\">\n      <GoogleApiWrapper\n        className=\"apiWrapper\"\n        lat={props.lat}\n        lon={props.lon}\n      />\n      <WeatherCard\n        lat={props.lat}\n        lon={props.lon}\n        weatherForecast={props.weatherForecast}\n      />\n    </div>\n  );\n};\n\nexport default LocationData;\n","import React from \"react\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport \"./SeasonDisplay.css\";\nimport Loader from \"./loader.js\";\nimport LocationData from \"./LocationData\";\nimport \"./App.css\";\nrequire(\"dotenv\").config();\n\n// This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n/* *** Component LifeCycle: Creation to Removal\n\t1. constructor\n\t2. render\n\t \t* content visible on screen; HAVE TO DEFINE\n\t3. componentDidMount\n\t\t* automatically called when component first shows up in app;\n\t\tSit and wait for updates to data on page;\n\t4. componentDidUpdate\n\t\t* called automatically when component changes;\n\t\tsit and wait until component is no longer shown\n\t5. componentWillUnmount\n*/\n/* *** Component LifeCycle Methods\n\tExamples of when to use Lifecycle Methods:\n\t\tconstructor(props) : good place for one-time setup and state initialization; avoid data loading, used `componentDidMount` instead;\n\t\trender() : avoid doing anything BESIDES returning JSX;\n\t\tcomponentDidMount() : initial data loading for components, outside processes (ex: current position, API requests, etc); only loads once, upon mount;\n\t\tcomponentDidUpdate: called EVERY TIME a component updates; data-loading when state/props change (network request, input changes, etc.);\n\t\tcomponentWillUnmount() : clean-up data;\n\t\t***Other LifeCycle Methods (not often used):\n\t\tshouldComponentUpdate()\n\t\tgetDerivedStateFromProps()\n\t\tgetSnapshotBeforeUpdate()\n*/\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n\n// console.log(process.env.REACT_APP_WEATHER_API_KEY);\n//\n// console.log(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n// `App` written as `class`- based component:\nclass App extends React.Component {\n  // `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n  // `constructor` is not required unless building additional setup for app.\n  constructor(props) {\n    super(props); // `super` used to set initial `state` in React\n    // `state` is created inside a JS object (`{...}`)\n    // create `this.state` to track `state` across the app.\n    // direct assignment to `state` in ONLY done when INITIALIZING `state`;\n    this.state = {\n      lat: null,\n      lon: null,\n      mapData: [],\n      weatherForecast: [],\n      errorMessage: null\n    };\n    /* Can also set initial state in a single line, w/o having to use constructor method:\n\t\tstate = { lat: null, lon: null, errorMessage: null };\n\t\t*/\n  }\n\n  async componentDidMount() {\n    // use built-in browser function to get `geolocation` for user\n    // this was initially built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data (in this case from the browser), but was moved into `componentDidMount()`, as it is a better lifeCycle method to use for initial data loading.\n    await window.navigator.geolocation.getCurrentPosition(\n      position => {\n        const { latitude, longitude } = position.coords;\n        // called `setState` to update `lat` and `lon`\n        this.setState(\n          {\n            lat: latitude,\n            lon: longitude\n          },\n          async () => {\n            const response = await fetch(\n              `http://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_WEATHER_API_KEY}&q=${this.state.lat},${this.state.lon}&days=5`\n            );\n            // convert results to JSON\n            const data = await response.json();\n            this.setState({\n              weatherForecast: data.forecast.forecastday\n            });\n          }\n        );\n      },\n      // make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n      error => this.setState({ errorMessage: error.message })\n    );\n  }\n\n  // componentDidUpdate() {\n  // \tconsole.log('Component Updated')\n  // }\n  // componentWillUnmount() {\n  // \tconsole.log('Component Unmounted')\n  // }\n\n  renderContent() {\n    // `if` statements are helpful for Conditional Rendering...\n    if (this.state.errorMessage || !this.state.lat) {\n      return <h2>Error: {this.state.errorMessage}</h2>;\n    } else if (!this.state.errorMessage && this.state.lat) {\n      return (\n        // `state` can be passed down to children components as `props`\n        <div id=\"container\">\n          <div>\n            <SeasonDisplay lat={this.state.lat} lon={this.state.lon} />\n          </div>\n          <div id=\"locationData\">\n            <LocationData\n              lat={this.state.lat}\n              lon={this.state.lon}\n              weatherForecast={this.state.weatherForecast}\n            />\n          </div>\n        </div>\n      );\n    }\n    return (\n      <div>\n        <Loader message=\"Waiting on You...\" />\n      </div>\n    );\n  }\n\n  render() {\n    return <div id=\"container\">{this.renderContent()}</div>;\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\n// Moved code from `index.js` to new `App.js` to keep all components in same folder.\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);\n"],"sourceRoot":""}