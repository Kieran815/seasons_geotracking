{"version":3,"sources":["Components/SeasonDisplay.js","Components/loader.js","APIs/mapsAPI.js","Components/WeatherCard.js","Components/LocationData.js","Components/App.js","index.js"],"names":["seasonTheme","Spring","text","iconName","Summer","Fall","Winter","error","icon","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","message","defaultProps","MapContainer","google","this","style","display","justifyContent","width","maxWidth","height","minHeight","maxHeight","initialCenter","lng","lon","zoom","React","Component","GoogleApiWrapper","apiKey","WeatherCard","dailyCard","weatherForecast","map","index","id","key","date_epoch","date","src","day","condition","alt","maxtemp_f","mintemp_f","LocationData","App","state","mapData","errorMessage","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","setState","a","fetch","response","json","data","console","log","forecast","forecastday","renderContent","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.07a1fb20.chunk.js","sourcesContent":["import React from 'react';\nimport './SeasonDisplay.css';\n\n// created configuration object (`seasonTheme`) to make objects with `text` and `iconName` options to plug directly into the `return` statement based on what renders from the results of the `season` variable.\nconst seasonTheme = {\n\tSpring: {\n\t\ttext: \"Mother Earth has Awoken\",\n\t\ticonName: 'umbrella'\n\t},\n\tSummer: {\n\t\ttext: \"Surf's Up, Son!!!\",\n\t\ticonName: 'sun'\n\t},\n\tFall: {\n\t\ttext: \"It's Fall, Bitches!!!\",\n\t\ticonName: 'leaf'\n\t},\n\tWinter: {\n\t\ttext: \"Cuz I'm... Cold-Blooooded!!!\",\n\t\ticonName: 'snowflake'\n\t},\n\terror: {\n\t\ttext: \"Wait...What Happened???\",\n\t\ticon: 'question circle'\n\t}\n};\n\n// more `if` statements for conditional rendering\nconst getSeason = (lat, month) => {\n\tif (lat > 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"Spring\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"Summer\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"Fall\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"Winter\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t} else if (lat < 0) {\n\t\tif(month > 1 && month < 5) {\n\t\t\treturn \"fall\";\n\t\t} else if (month > 4 && month < 8) {\n\t\t\treturn \"winter\";\n\t\t} else if (month > 7 && month < 10) {\n\t\t\treturn \"spring\";\n\t\t} else if (month > 2 || month < 9) {\n\t\t\treturn \"summer\";\n\t\t} else {\n\t\t\treturn \"error\";\n\t\t}\n\t}\n}\n\nconst SeasonDisplay = props => {\n\t// select and save results of `getSeason` statement\n\tconst season = getSeason(props.lat, new Date().getMonth());\n\t// `text` and `iconName` destructrued from `seasonConfig`, then placed directly into the `return` statement based on `season` variable\n\tconst { text, iconName } = seasonTheme[season];\n\n\treturn (\n\t\t<div className='season-display container'>\n\t\t\t<div className={`season-display ${season}`}>\n\t\t\t\t<i className={`icon-left huge ${iconName} icon`} />\n\t\t\t\t<h1 className='seasonText'>{season}</h1>\n\t\t\t\t<h2 className='seasonText'>{text}</h2>\n\t\t\t\t<i className={`icon-right huge ${iconName} icon`} />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Loader = (props) => {\n\treturn (\n\t  <div className=\"ui active dimmer\">\n\t    <div className=\"ui text loader\">{props.message}</div>\n\t  </div>\n\t);\n};\n\nLoader.defaultProps = {\n\tmessage: 'Loading...'\n};\n\nexport default Loader;\n","import React from \"react\";\nimport {Map, GoogleApiWrapper} from 'google-maps-react';\n\nexport class MapContainer extends React.Component {\n\n  render() {\n    const style = {\n      display: \"flex\",\n      justifyContent: \"space-around\",\n      width: \"auto\",\n      maxWidth: \"21em\",\n      height: \"45vh\",\n      minHeight: \"40vh\",\n      maxHeight: \"50vh\"\n    }\n    return (\n      <Map\n        google={this.props.google}\n        style={style}\n        initialCenter={{\n          lat: this.props.lat,\n          lng: this.props.lon\n        }}\n        zoom={16}\n      />\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: (\"AIzaSyBUTgyLvwoEUylFXTa0gG9heCDcCqCahEc\")\n})(MapContainer)\n","import React from \"react\";\nimport \"./WeatherCard.css\";\n\nconst WeatherCard = props => {\n\n  const weatherForecast = props.weatherForecast;\n\n  const dailyCard = weatherForecast.map((index) => {\n    return (\n      <div className=\"ui card\" id=\"card\" key={index.date_epoch}>\n        <div className=\"content\">\n          <div className=\"header\">\n            {index.date}\n          </div>\n          <div className=\"image\">\n            <img src={index.day.condition.icon} alt=\"Weather Icon\" />\n          </div>\n          <div className=\"meta\">\n            <p>Conditions: {index.day.condition.text}</p>\n            <p className=\"header\">\n              <span>High/Low: {index.day.maxtemp_f}f/{index.day.mintemp_f}f\n              </span>\n            </p>\n          </div>\n          <div className=\"description\">\n          </div>\n        </div>\n      </div>\n    )\n  })\n\n  return(\n    <div className=\"dailyCardGroup\">\n      {dailyCard}\n    </div>\n  )\n}\n\nexport default WeatherCard;\n","import React from \"react\";\nimport GoogleApiWrapper from \"../APIs/mapsAPI\";\nimport WeatherCard from \"./WeatherCard\";\nimport \"./LocationData.css\";\n\nconst LocationData = props => {\n  return (\n    <div className=\"locationData\">\n      <GoogleApiWrapper\n        className=\"apiWrapper\"\n        lat={props.lat}\n        lon={props.lon}\n      />\n      <WeatherCard\n        lat={props.lat}\n        lon={props.lon}\n        weatherForecast={props.weatherForecast}\n      />\n    </div>\n  );\n};\n\nexport default LocationData;\n","import React from \"react\";\nimport SeasonDisplay from './SeasonDisplay';\nimport './SeasonDisplay.css';\nimport Loader from './loader.js';\nimport LocationData from \"./LocationData\";\nimport \"./App.css\";\n\n// This app focuses on `class`-based components in react and their additional capabilities, including an introduction to `state` and `props`.\n/* `App` written as a `functional` component:\nconst App = () => {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Hi Kieran</h1>\n\t\t\t<SeasonDisplay />\n\t\t</div>\n\t);\n};\n*/\n// React expects `class` components to have multiple methods attached to it, making it a better option for complex components. Extending `React.Component` imports several built-in methods to the new component and borrows functionality. `class` components can also access `state`.\n/* ***Rules of `Class` Components:\n\tMust be a JavaScript class;\n\tMust `extend` (subclass) React.Component (imports built-in methods);\n\tMust Define a `render` method that will `return` some JSX (used for output onto windows);\n*/\n/* *** Component LifeCycle: Creation to Removal\n\t1. constructor\n\t2. render\n\t \t* content visible on screen; HAVE TO DEFINE\n\t3. componentDidMount\n\t\t* automatically called when component first shows up in app;\n\t\tSit and wait for updates to data on page;\n\t4. componentDidUpdate\n\t\t* called automatically when component changes;\n\t\tsit and wait until component is no longer shown\n\t5. componentWillUnmount\n*/\n/* *** Component LifeCycle Methods\n\tExamples of when to use Lifecycle Methods:\n\t\tconstructor(props) : good place for one-time setup and state initialization; avoid data loading, used `componentDidMount` instead;\n\t\trender() : avoid doing anything BESIDES returning JSX;\n\t\tcomponentDidMount() : initial data loading for components, outside processes (ex: current position, API requests, etc); only loads once, upon mount;\n\t\tcomponentDidUpdate: called EVERY TIME a component updates; data-loading when state/props change (network request, input changes, etc.);\n\t\tcomponentWillUnmount() : clean-up data;\n\t\t***Other LifeCycle Methods (not often used):\n\t\tshouldComponentUpdate()\n\t\tgetDerivedStateFromProps()\n\t\tgetSnapshotBeforeUpdate()\n*/\n/* *** Rules of `State`:\n\tOnly usable with `class` components (unless using `hooks`, more later);\n\tEasily confused with `props` (more on `props` later);\n\t`state` is a JavaScript object that contains data relevant to a component;\n\tUpdating `state` on a component causes the component to instantly re-render;\n\t`state` must be initialized when a component is created;\n\t`state` can only be updated using the function `setState()`;\n*/\n\n// console.log(process.env.REACT_APP_WEATHER_API_KEY);\n//\n// console.log(process.env.REACT_APP_GOOGLE_MAPS_API_KEY);\n\n// `App` written as `class`- based component:\nclass App extends React.Component {\n\t// `constructor()` from JS. `constructor` is called any time an instance of a class is created. used in React to set initial `state`.\n\t// `constructor` is not required unless building additional setup for app.\n\tconstructor(props) {\n\t\tsuper(props); // `super` used to set initial `state` in React\n\t\t// `state` is created inside a JS object (`{...}`)\n\t\t// create `this.state` to track `state` across the app.\n\t\t// direct assignment to `state` in ONLY done when INITIALIZING `state`;\n\t\tthis.state = {\n\t\t\tlat: null,\n\t\t\tlon: null,\n\t\t\tmapData: [],\n\t\t\tweatherForecast: [],\n\t\t\terrorMessage: null\n\t\t}\n\t\t/* Can also set initial state in a single line, w/o having to use constructor method:\n\t\tstate = { lat: null, lon: null, errorMessage: null };\n\t\t*/\n\t}\n\n\tasync componentDidMount() {\n\t\t// use built-in browser function to get `geolocation` for user\n\t\t// this was initially built into the `constructor` so that when the class is created, it will immediately begin working on requesting the data (in this case from the browser), but was moved into `componentDidMount()`, as it is a better lifeCycle method to use for initial data loading.\n\t\tawait window.navigator.geolocation.getCurrentPosition(\n\t\t\tposition => {\n\t\t\t\tconst { latitude, longitude } = position.coords;\n\t\t\t\t// called `setState` to update `lat` and `lon`\n\t\t\t\tthis.setState(\n\t\t\t\t\t{\n\t\t\t\t\t\tlat: latitude,\n\t\t\t\t\t\tlon: longitude\n\t\t\t\t \t},\n\t\t\t\t\tasync () => {\n\t\t\t\t\t\tconst response = await fetch(\n\t\t\t\t\t\t\t`http://api.weatherapi.com/v1/forecast.json?key=48f162a78e4f4a62865190945190412&q=${this.state.lat},${this.state.lon}&days=5`\n\t\t\t\t\t\t);\n\t\t\t\t\t\t// convert results to JSON\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconsole.log(data);\n\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\tweatherForecast: data.forecast.forecastday\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t},\n\t\t\t// make sure to `console.log(error)` any time any errors may pop up in your code (easier debugging)\n\t\t\terror => this.setState({ errorMessage: error.message })\n\t\t);\n\n\n\t}\n\n\t// componentDidUpdate() {\n\t// \tconsole.log('Component Updated')\n\t// }\n\t// componentWillUnmount() {\n\t// \tconsole.log('Component Unmounted')\n\t// }\n\n\trenderContent() {\n\t\t// `if` statements are helpful for Conditional Rendering...\n\t\tif(this.state.errorMessage || !this.state.lat) {\n\t\t\treturn <h2>Error: {this.state.errorMessage}</h2>;\n\t\t} else if (!this.state.errorMessage && this.state.lat) {\n\t\t\treturn (\n\t\t\t\t// `state` can be passed down to children components as `props`\n\t\t\t\t\t<div id=\"container\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<SeasonDisplay\n\t\t\t\t\t\t\t\tlat={this.state.lat}\n\t\t\t\t\t\t\t\tlon={this.state.lon}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id=\"locationData\">\n\t\t\t\t\t\t\t<LocationData\n\t\t\t\t\t\t\t\tlat={this.state.lat}\n\t\t\t\t\t\t\t\tlon={this.state.lon}\n\t\t\t\t\t\t\t\tweatherForecast={this.state.weatherForecast}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Loader message=\"Waiting on You...\" />\n\t\t\t</div>\n\t\t)\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"container\">\n\t\t\t\t{this.renderContent()}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\n\n// Moved code from `index.js` to new `App.js` to keep all components in same folder.\n\nReactDOM.render(\n\t<App />,\n\tdocument.querySelector('#root')\n);\n"],"sourceRoot":""}